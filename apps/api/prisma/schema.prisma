// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatarUrl String?
  image     String?
  emailVerified DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects     Project[]
  runDigests   RunDigest[]
  accounts     Account[]
  sessions     Session[]

  @@map("users")
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  repoUrl     String?
  repoOwner   String?
  repoName    String?
  userId      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  prds        PRD[]
  epics       Epic[]
  signals     Signal[]
  runDigests  RunDigest[]

  @@index([userId])
  @@index([repoOwner, repoName])
  @@map("projects")
}

model PRD {
  id          String   @id @default(cuid())
  projectId   String
  title       String
  content     String   // Markdown content
  metadata    String   // JSON metadata (objectives, milestones, constraints, etc.)
  version     String   @default("1.0.0")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([projectId, isActive])
  @@map("prds")
}

model Epic {
  id          String   @id @default(cuid())
  projectId   String
  title       String
  description String
  status      String   @default("todo") // "todo" | "in_progress" | "done" | "out_of_date"
  priority    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@index([projectId])
  @@index([projectId, status])
  @@map("epics")
}

model Task {
  id         String   @id @default(cuid())
  epicId     String
  title      String
  status     String   @default("todo") // "todo" | "in_progress" | "done" | "out_of_date"
  acceptance String   // JSON array of acceptance criteria
  checkers   String   // JSON array of checker configs
  trace      String   // JSON object with prdRefs and repoSignals
  priority   Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  epic Epic @relation(fields: [epicId], references: [id], onDelete: Cascade)

  @@index([epicId])
  @@index([epicId, status])
  @@map("tasks")
}

model Signal {
  id        String   @id @default(cuid())
  projectId String
  type      String
  value     String   // JSON serialized value
  metadata  String?  // Additional context/metadata
  timestamp DateTime @default(now())

  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([projectId, type])
  @@index([timestamp])
  @@map("signals")
}

model RunDigest {
  id            String   @id @default(cuid())
  projectId     String
  userId        String
  type          String   // "daily" | "weekly" | "manual"
  title         String
  summary       String   // Generated summary of changes
  completedTasks String  // JSON array of completed task IDs
  newTasks      String   // JSON array of newly created task IDs
  blockers      String   // JSON array of identified blockers
  insights      String   // JSON array of insights and recommendations
  createdAt     DateTime @default(now())

  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([userId])
  @@index([projectId, type])
  @@index([createdAt])
  @@map("run_digests")
}
